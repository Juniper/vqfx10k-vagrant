# -*- mode: ruby -*-
# vi: set ft=ruby :

# On Windows, only supported if running under Linux Subsystem for Windows
if Vagrant::Util::Platform.windows?
    puts 'Linux Subsystem for Windows required on Windows hosts.  Please refer to Windows.md for further instruction.'
    abort 
end

VAGRANTFILE_API_VERSION = "2"

UUID = "fab1"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

    config.ssh.insert_key = false

    (1..2).each do |id|
        re_name  = ( "vqfx" + id.to_s ).to_sym
        pfe_name = ( "vqfx" + id.to_s + "-pfe" ).to_sym
        
        ##############################
        ## Packet Forwarding Engine ##
        ##############################
        config.vm.define pfe_name do |vqfxpfe|
            vqfxpfe.ssh.insert_key = false
            vqfxpfe.vm.box = 'juniper/vqfx10k-pfe'
            vqfxpfe.vm.boot_timeout = 600

            # DO NOT REMOVE / NO VMtools installed ttt
            vqfxpfe.vm.synced_folder '.', 
                '/vagrant', disabled: true

            # Internal em1 port to RE
            vqfxpfe.vm.network 'private_network', 
                auto_config: false, 
                nic_type: '82540EM', 
                virtualbox__intnet: "#{UUID}_vqfx#{id}_internal"

            # In case you have limited resources, you can limit the CPU used per vqfx-pfe VM, usually 50% is good
            #vqfxpfe.vm.provider "virtualbox" do |v|
            #   v.customize ["modifyvm", :id, "--cpuexecutioncap", "50"]
            #end
        end

        ##########################
        ## Routing Engine  #######
        ##########################
        config.vm.define re_name do |vqfx|
            vqfx.vm.hostname = "vqfx#{id}"
            vqfx.vm.box = 'juniper/vqfx10k-re'
            vqfx.vm.boot_timeout = 600

            # VM can be really slow unless COM1 is connected to something.
            (File.exist?("/proc/version") and File.readlines("/proc/version").grep(/(Microsoft|WSL)/).size > 0) ? ( re_log = "NUL" ) : ( re_log = "/dev/null" )
            vqfx.vm.provider "virtualbox" do |v|
                v.customize ["modifyvm", :id, "--uartmode1", "file", re_log]
            end

            # DO NOT REMOVE / NO VMtools installed
            vqfx.vm.synced_folder '.', 
                '/vagrant', disabled: true

            # Internal em1 port to PFE
            vqfx.vm.network 'private_network', 
                auto_config: false, 
                nic_type: '82540EM', 
                virtualbox__intnet: "#{UUID}_vqfx#{id}_internal"
            
            # Unused em2 port we need to exclude 
            vqfx.vm.network 'private_network', 
                auto_config: false, nic_type: '82540EM', 
                virtualbox__intnet: "#{UUID}_vqfx#{id}_reserved-bridge"

            # Interconnect link between vqfx (xe-0/0/0)
            vqfx.vm.network 'private_network', 
                auto_config: false, 
                nic_type: '82540EM', 
                virtualbox__intnet: "#{UUID}_vqfx_interconnect"

            # Dataplane ports (Yes, dataplane ports are mapped on the RE and not PFE for vQFX10k)
            (1..4).each do |seg_id|
               vqfx.vm.network 'private_network', 
                auto_config: false, 
                nic_type: '82540EM', 
                virtualbox__intnet: "#{UUID}_vqfx#{id}_seg#{seg_id}"
            end

        end
    
    
        ##########################
        ## Servers         #######
        ##########################
        (1..2).each do |srvcounter|
            srv_name  = ( "srv" + id.to_s + srvcounter.to_s).to_sym
        
            config.vm.define srv_name do |srv|
            
                # Uncomment 1 line below to use minitrusty image instead of Tiny Core linux. Comment Tiny Core further down. "minitrusty" takes 512MB RAM per instance.
                 srv.vm.box = "robwc/minitrusty64"
            
                # Tiny-Core linux needs extras cuz not well supported with Vagrant. Only 64M of RAM per instance! Has ping, ssh, ssh server.
                # Comment ines below this line and uncomment minitrusty64 above to swap server images
                # srv.vm.box = "olbat/tiny-core-micro"
                #srv.vm.synced_folder '.', 
                #    '/vagrant', 
                #    disabled: true
                #config.ssh.shell = "sh -l"
                # End Tiny-Core

                srv.vm.hostname = "#{srv_name}"
                srv.vm.network 'private_network', 
                    ip: "10.10.#{srvcounter}.#{id}0", 
                    virtualbox__intnet: "#{UUID}_vqfx#{id}_seg#{srvcounter}"

                srv.ssh.insert_key = true
                srv.vm.provision "shell",
                    inline: "sudo route add -net 10.10.0.0/16 gw 10.10.#{srvcounter}.254" # ubuntu
                    #inline: "sudo route add 0/0 gw 10.10.#{srvcounter}.254" # Tiny-Core
            end
        end
    end

    ##############################
    ## Box provisioning        ###
    ##############################
    config.vm.provision "ansible" do |ansible|
        ansible.compatibility_mode = "2.0"
        ansible.config_file = "ansible.cfg"
        ansible.groups = {
            "vqfx10k" => ["vqfx1", "vqfx2" ],
            "vqfx10kpfe"  => ["vqfx1-pfe", "vqfx2-pfe"],
            "all:children" => ["vqfx10k", "vqfx10kpfe"]
        }
        ansible.playbook = "pb.conf.all.commit.yaml"
    end
end
